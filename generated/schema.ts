// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mlo(): BigInt {
    let value = this.get("mlo");
    return value.toBigInt();
  }

  set mlo(value: BigInt) {
    this.set("mlo", Value.fromBigInt(value));
  }

  get fe(): BigInt {
    let value = this.get("fe");
    return value.toBigInt();
  }

  set fe(value: BigInt) {
    this.set("fe", Value.fromBigInt(value));
  }

  get al(): BigInt {
    let value = this.get("al");
    return value.toBigInt();
  }

  set al(value: BigInt) {
    this.set("al", Value.fromBigInt(value));
  }

  get cu(): BigInt {
    let value = this.get("cu");
    return value.toBigInt();
  }

  set cu(value: BigInt) {
    this.set("cu", Value.fromBigInt(value));
  }

  get au(): BigInt {
    let value = this.get("au");
    return value.toBigInt();
  }

  set au(value: BigInt) {
    this.set("au", Value.fromBigInt(value));
  }

  get ti(): BigInt {
    let value = this.get("ti");
    return value.toBigInt();
  }

  set ti(value: BigInt) {
    this.set("ti", Value.fromBigInt(value));
  }

  get lands(): Array<string> | null {
    let value = this.get("lands");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set lands(value: Array<string> | null) {
    if (value === null) {
      this.unset("lands");
    } else {
      this.set("lands", Value.fromStringArray(value as Array<string>));
    }
  }

  get factories(): Array<string> | null {
    let value = this.get("factories");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set factories(value: Array<string> | null) {
    if (value === null) {
      this.unset("factories");
    } else {
      this.set("factories", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Land extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Land entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Land entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Land", id.toString(), this);
  }

  static load(id: string): Land | null {
    return store.get("Land", id) as Land | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get x(): i32 {
    let value = this.get("x");
    return value.toI32();
  }

  set x(value: i32) {
    this.set("x", Value.fromI32(value));
  }

  get y(): i32 {
    let value = this.get("y");
    return value.toI32();
  }

  set y(value: i32) {
    this.set("y", Value.fromI32(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get factory(): string | null {
    let value = this.get("factory");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set factory(value: string | null) {
    if (value === null) {
      this.unset("factory");
    } else {
      this.set("factory", Value.fromString(value as string));
    }
  }

  get seed(): BigInt {
    let value = this.get("seed");
    return value.toBigInt();
  }

  set seed(value: BigInt) {
    this.set("seed", Value.fromBigInt(value));
  }
}

export class Factory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Factory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Factory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Factory", id.toString(), this);
  }

  static load(id: string): Factory | null {
    return store.get("Factory", id) as Factory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get type(): i32 {
    let value = this.get("type");
    return value.toI32();
  }

  set type(value: i32) {
    this.set("type", Value.fromI32(value));
  }

  get efficiency(): i32 {
    let value = this.get("efficiency");
    return value.toI32();
  }

  set efficiency(value: i32) {
    this.set("efficiency", Value.fromI32(value));
  }

  get x(): i32 {
    let value = this.get("x");
    return value.toI32();
  }

  set x(value: i32) {
    this.set("x", Value.fromI32(value));
  }

  get y(): i32 {
    let value = this.get("y");
    return value.toI32();
  }

  set y(value: i32) {
    this.set("y", Value.fromI32(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }
}
